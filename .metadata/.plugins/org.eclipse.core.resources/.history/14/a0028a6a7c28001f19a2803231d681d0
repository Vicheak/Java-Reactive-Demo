package java_reactive_demo.exercise;

import java.util.Random;
import java.util.concurrent.atomic.AtomicReference;

import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

import java_reactive_demo.util.Util;
import reactor.core.publisher.Flux;

public class FluxExercise {
	
	public static void main(String[] args) {
		
		Flux<Integer> flux = Flux.just(100); 
		
		AtomicReference<Subscription> atomicReference = new AtomicReference<>(); 
		
		flux.subscribeWith(new Subscriber<Integer>() {
			@Override
			public void onSubscribe(Subscription s) {
				atomicReference.set(s);
			}

			@Override
			public void onNext(Integer t) {
				System.out.println("Recieved : " + t);
			}

			@Override
			public void onError(Throwable t) {
				
			}

			@Override
			public void onComplete() {
				// TODO Auto-generated method stub
				
			}
		});
	
		
	}
	
	private static Flux<Integer> updatePrice(Flux<Integer> flux) {
		return flux
				.map(price -> price + getUpdatePriceInterval()); 
	}
	
	private static int getUpdatePriceInterval() {
		int[] numbers = {-4,-3,-2,-1,0,1,2,3,4};
	    Random random = new Random();
	    int randomIndex = random.nextInt(numbers.length);
		return numbers[randomIndex]; 
	}

}
